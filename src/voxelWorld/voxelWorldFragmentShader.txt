#version 400 core

in vec2 pass_textureCoords;
in vec2 pass_materialAttrib;
in vec3 surfaceNormal;
in vec3 toSunVector;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;
in vec4 shadowCoords[4];
in float shadowDist;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform sampler2D normalMap;
uniform sampler2D shadowMap[4];
uniform float shadowMapDistances[4];
uniform vec3 lightColor[4];
uniform vec3 attenuation[4];
uniform vec3 skyColor;
uniform float useFakeLighting;
uniform int pcfCount;
uniform float noiseAmplifier;
uniform float shadowMapSize;

void main(void) {
	vec4 normalMapValue = 2.0 * texture(normalMap, pass_textureCoords, -1.0) - 1.0;
	vec3 unitNormal = normalize(normalMapValue.rgb);
	vec3 unitCameraVector = normalize(toCameraVector);

	// Shadow mapping
	float texelSize = shadowMapDistances[3] / (shadowMapSize * 5);
	float total = 0.0;
	
	int samplerIndex = 3;
	if(shadowDist < shadowMapDistances[2]) samplerIndex = 2;
	if(shadowDist < shadowMapDistances[1]) samplerIndex = 1;
	if(shadowDist < shadowMapDistances[0]) samplerIndex = 0;
	
	texelSize /= shadowMapDistances[samplerIndex];
	
	if(shadowDist < shadowMapDistances[3]) {
		for(int x = -pcfCount; x <= pcfCount; x++) {
			for(int y = -pcfCount; y <= pcfCount; y++) {
				vec2 rinput = vec2(pass_textureCoords.x + x, pass_textureCoords.y + y);
				float randomNum = fract(sin(dot(rinput ,vec2(12.9898,78.233))) * 43758.5453) - 0.5;
				float objectNearestLight = texture(shadowMap[samplerIndex], shadowCoords[samplerIndex].xy + vec2(x + randomNum * noiseAmplifier, y + randomNum * noiseAmplifier) * texelSize).r;
				if(shadowCoords[samplerIndex].z > objectNearestLight + 0.002) {
					total += 1.0;
				}
			}
		}
		total /= (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);	
	}
	float lightFactor = 1.0 - (total * shadowCoords[samplerIndex].w);

	// Texture mapping
	vec4 textureColor = texture(textureSampler, pass_textureCoords);
	if(textureColor.a < 0.5) {
		discard;
	}
	
	// Phong shading
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	// ------------sun shading--------------------
	vec3 unitLightVector = normalize(toSunVector);
	vec3 unitLightDirection = -unitLightVector;
	
	// diffuse
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = max(nDotl, 0.0);
	totalDiffuse = totalDiffuse + brightness * lightFactor;
	
	// specular
	vec3 reflectedLightDirection = reflect(unitLightDirection, unitNormal);
	float specularFactor = dot(reflectedLightDirection, unitCameraVector);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, pass_materialAttrib[1]);
	totalSpecular = totalSpecular + lightFactor * dampedFactor * pass_materialAttrib[0];
	
	// -----------------spotlight shading------------------
	for(int i = 0; i < 4; i++) {
		float distance = length(toLightVector[i]);
		float atFactor = attenuation[i].x + attenuation[i].y * distance + attenuation[i].z * distance * distance;
		
		vec3 unitLightVector = normalize(toLightVector[i]);
		vec3 unitLightDirection = -unitLightVector;
		
		// diffuse
		float nDotl = dot(unitNormal, unitLightVector);
		float brightness = max(nDotl, 0.0);
		totalDiffuse = totalDiffuse + (brightness * lightColor[i]) / atFactor;
		
		// specular
		vec3 reflectedLightDirection = reflect(unitLightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitCameraVector);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, pass_materialAttrib[1]);
		totalSpecular = totalSpecular + (dampedFactor * pass_materialAttrib[0] * lightColor[i]) / atFactor;
	}
	totalDiffuse = max(totalDiffuse, 0.4); // ambient light

	// final light
	out_Color = vec4(totalDiffuse, 1.0) * textureColor + vec4(totalSpecular, 1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
	
	if(useFakeLighting > 0.5) out_Color = mix(vec4(1.0, 1.0, 1.0, 1.0), out_Color, 0.25);
}